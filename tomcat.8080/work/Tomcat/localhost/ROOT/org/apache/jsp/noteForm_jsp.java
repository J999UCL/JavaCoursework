/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-16 21:17:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.*;
import uk.ac.ucl.model.Note;
import uk.ac.ucl.model.Block;

public final class noteForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("uk.ac.ucl.model.Block");
    _jspx_imports_classes.add("uk.ac.ucl.model.Note");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>\r\n");
      out.write("        ");

            String action = (String) request.getAttribute("action");
            if ("edit".equals(action)) {
                out.print("Edit Note");
            } else {
                out.print("Create Note");
            }
        
      out.write("\r\n");
      out.write("    </title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h2>\r\n");
      out.write("    ");

        if ("edit".equals(request.getAttribute("action"))) {
            out.print("Edit Note");
        } else {
            out.print("Create Note");
        }
    
      out.write("\r\n");
      out.write("</h2>\r\n");
      out.write("<!-- The form action uses the servlet mapping; the category path is passed via a hidden field -->\r\n");
      out.write("<form action=\"");
      out.print( request.getContextPath() );
      out.print( request.getAttribute("action") );
      out.write("\" method=\"post\" enctype=\"multipart/form-data\">\r\n");
      out.write("    <!-- Hidden field for the current category path -->\r\n");
      out.write("    <input type=\"hidden\" name=\"categoryPath\" value=\"");
      out.print( request.getAttribute("categoryPath") );
      out.write("\" />\r\n");
      out.write("\r\n");
      out.write("    <!-- If editing, include the note's ID -->\r\n");
      out.write("    ");

        if ("edit".equals(request.getAttribute("action")) && request.getAttribute("note") != null) {
    
      out.write("\r\n");
      out.write("    <input type=\"hidden\" name=\"noteId\" value=\"");
      out.print( ((Note) request.getAttribute("note")).getId() );
      out.write("\" />\r\n");
      out.write("    ");

        }
    
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <!-- Note Title -->\r\n");
      out.write("    <label for=\"title\">Title:</label>\r\n");
      out.write("    <input type=\"text\" id=\"title\" name=\"title\"\r\n");
      out.write("           value=\"");
      out.print( (request.getAttribute("title") != null)
                        ? request.getAttribute("title")
                        : ((request.getAttribute("note") != null)
                            ? ((Note)request.getAttribute("note")).getTitle()
                            : "") );
      out.write("\" /><br/><br/>\r\n");
      out.write("\r\n");
      out.write("    ");

        // Retrieve the list of blocks from a partial submission or from the existing note.
        List<Block> blocks = (List<Block>) request.getAttribute("blocks");
        if (blocks == null) {
            Note note = (Note) request.getAttribute("note");
            if (note != null && note.getContentBlocks() != null && !note.getContentBlocks().isEmpty()) {
                blocks = note.getContentBlocks();
            } else {
                blocks = new ArrayList<>();
                blocks.add(new Block(1, "text", ""));
            }
        }
        int blockCount = blocks.size();
    
      out.write("\r\n");
      out.write("    <!-- Hidden field for block count -->\r\n");
      out.write("    <input type=\"hidden\" name=\"blockCount\" value=\"");
      out.print( blockCount );
      out.write("\" />\r\n");
      out.write("\r\n");
      out.write("    <!-- Render each block -->\r\n");
      out.write("    ");

        for (int i = 0; i < blockCount; i++) {
            Block block = blocks.get(i);
    
      out.write("\r\n");
      out.write("    <fieldset>\r\n");
      out.write("        <legend>Block ");
      out.print( (i + 1) );
      out.write(' ');
      out.write('(');
      out.print( block.getType() );
      out.write(")</legend>\r\n");
      out.write("        <!-- The block type is passed as hidden data -->\r\n");
      out.write("        <input type=\"hidden\" name=\"blockType\" value=\"");
      out.print( block.getType() );
      out.write("\" />\r\n");
      out.write("        ");
 if ("image".equalsIgnoreCase(block.getType())) { 
      out.write("\r\n");
      out.write("        <label for=\"blockImage");
      out.print( i );
      out.write("\">Upload Image:</label>\r\n");
      out.write("        <input type=\"file\" id=\"blockImage");
      out.print( i );
      out.write("\" name=\"blockImage");
      out.print( i );
      out.write("\" accept=\"image/*\" /><br/>\r\n");
      out.write("        ");
 if (block.getData() != null && !block.getData().isEmpty()) { 
      out.write("\r\n");
      out.write("        <p>Current Image: <img src=\"");
      out.print( request.getContextPath() + "/" + block.getData() );
      out.write("\" alt=\"Image\" style=\"max-width:200px;\"/></p>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("        ");
 } else { 
      out.write("\r\n");
      out.write("        <label for=\"blockData");
      out.print( i );
      out.write("\">Text:</label>\r\n");
      out.write("        <textarea id=\"blockData");
      out.print( i );
      out.write("\" name=\"blockData\" rows=\"4\" cols=\"50\">");
      out.print( block.getData() );
      out.write("</textarea>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("    </fieldset>\r\n");
      out.write("    ");

        }
    
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <div class=\"button-group\">\r\n");
      out.write("        <!-- \"Add Image\" button triggers partial submission -->\r\n");
      out.write("        <input type=\"submit\" name=\"actionType\" value=\"Add Image\" />\r\n");
      out.write("        <!-- \"Submit Note\" finalizes the note -->\r\n");
      out.write("        <input type=\"submit\" name=\"actionType\" value=\"Submit Note\" />\r\n");
      out.write("    </div>\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
