/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-21 01:17:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.*;
import uk.ac.ucl.model.*;
import uk.ac.ucl.model.CategoryIndex;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_packages.add("uk.ac.ucl.model");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("uk.ac.ucl.model.CategoryIndex");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>My Notes</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div>\r\n");
      out.write("    <!-- Search form with hidden fields for each category string -->\r\n");
      out.write("    <form action=\"\" method=\"get\">\r\n");
      out.write("        <input type=\"hidden\" name=\"action\" value=\"sort\" />\r\n");
      out.write("        ");

            String categoryPath = (String) request.getAttribute("categoryPath");
        
      out.write("\r\n");
      out.write("        <input type=\"hidden\" name=\"categoryPath\" value=\"");
      out.print( categoryPath );
      out.write("\" />\r\n");
      out.write("        ");


        
      out.write("\r\n");
      out.write("        <input type=\"text\" name=\"query\" placeholder=\"Search notes...\" />\r\n");
      out.write("        <button type=\"submit\">Search</button>\r\n");
      out.write("        <br/><br/>\r\n");
      out.write("        <button type=\"submit\" name=\"sortBy\" value=\"title\">Sort by Title</button>\r\n");
      out.write("        <button type=\"submit\" name=\"sortBy\" value=\"createdAt\">Sort by Date</button>\r\n");
      out.write("    </form>\r\n");
      out.write("    <div>\r\n");
      out.write("        <form action=\"");
      out.print( request.getContextPath() );
      out.write("/note/create\" method=\"get\" style=\"display:inline;\">\r\n");
      out.write("            <input type=\"hidden\" name=\"categoryPath\" value=\"");
      out.print(categoryPath);
      out.write("\"/>\r\n");
      out.write("            <button type=\"submit\">Add Note</button>\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <!-- Inline Category Creation Form -->\r\n");
      out.write("    <div>\r\n");
      out.write("        <form method=\"post\" action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/category/create\">\r\n");
      out.write("            <label for=\"categoryName\">New Category:</label>\r\n");
      out.write("            <input type=\"hidden\" name=\"categoryPath\" value=\"");
      out.print( categoryPath );
      out.write("\" />\r\n");
      out.write("            <input type=\"text\" id=\"categoryName\" name=\"categoryName\" placeholder=\"Enter category name\" required/>\r\n");
      out.write("            <button type=\"submit\">Add Category</button>\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("    ");

        // Retrieve the category hierarchy as a list
        List<CategoryIndex> categoryHierarchy = (List<CategoryIndex>) request.getAttribute("categoryHierarchy");
        if (categoryHierarchy != null && !categoryHierarchy.isEmpty()) {
            // Get the last element (current category)
            CategoryIndex currentCategory = categoryHierarchy.getLast();
            int lastCommaIndex = categoryPath.lastIndexOf(",");
            String backCategoryPath = (lastCommaIndex != -1) ? categoryPath.substring(0, lastCommaIndex) : "";
            if (currentCategory != null && currentCategory.getId() != 0L) {
    
      out.write("\r\n");
      out.write("    <h2>Category: ");
      out.print( currentCategory.getName() );
      out.write("</h2>\r\n");
      out.write("    <form action=\"\" method=\"get\">\r\n");
      out.write("        <input type=\"hidden\" name=\"categoryPath\" value=\"");
      out.print( backCategoryPath );
      out.write("\" />\r\n");
      out.write("        <button type=\"submit\">Back</button>\r\n");
      out.write("    </form>\r\n");
      out.write("    ");

            }
        }
    
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <h3>Notes</h3>\r\n");
      out.write("    ");

        List<IndexEntry> IndexEntries = (List<IndexEntry>) request.getAttribute("Entries");
        if (IndexEntries != null && !IndexEntries.isEmpty()) {
    
      out.write("\r\n");
      out.write("    <ul>\r\n");
      out.write("        ");
 for (IndexEntry entry : IndexEntries) {
            String categoryPathValue = categoryPath + ","+entry.getId();
            String actionUrl = "";
            if (entry instanceof Note) {
                actionUrl = "/note/view/";
                categoryPathValue = categoryPath;
            }
        
      out.write("\r\n");
      out.write("        <li>\r\n");
      out.write("            <form method=\"get\" action=\"");
      out.print(actionUrl );
      out.write("\">\r\n");
      out.write("                <input type=\"hidden\" name=\"Id\" value=\"");
      out.print( entry.getId() );
      out.write("\" />\r\n");
      out.write("                <input type=\"hidden\" name=\"categoryPath\" value=\"");
      out.print( categoryPathValue);
      out.write("\" />\r\n");
      out.write("                <button type=\"submit\">");
      out.print( entry.getName() );
      out.write("</button>\r\n");
      out.write("            </form>\r\n");
      out.write("        </li>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("    </ul>\r\n");
      out.write("    ");
 } else { 
      out.write("\r\n");
      out.write("    <p>No notes found in this category.</p>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
